import React from "react";
import { render } from "react-dom";
import { Map, TileLayer } from "react-leaflet";
import HeatmapLayer from "react-leaflet-heatmap-layer";
import "leaflet/dist/leaflet.css";
import "./styles.css";

import { addressPoints } from "./data.js";

class App extends React.Component {
  state = {
    mapHidden: false,
    layerHidden: false,
    addressPoints,
    radius: 12,
    blur: 5,
    max: 0.5,
    limitAddressPoints: false
  };

  /**
   * Toggle limiting the address points to test behavior with refocusing/zooming when data points change
   */
  toggleLimitedAddressPoints() {
    if (this.state.limitAddressPoints) {
      this.setState({
        addressPoints: addressPoints.slice(0, 250),
        //addressPoints2: addressPoints2.slice(0, 250),
        limitAddressPoints: false
      });
    } else {
      this.setState({
        addressPoints,
        //addressPoints2,
        limitAddressPoints: true
      });
    }
  }

  render() {
    const gradient = {
      0.1: "#89BDE0",
      0.2: "#96E3E6",
      0.4: "#82CEB6",
      0.6: "#FAF3A5",
      0.8: "#F5D98B",
      "1.0": "#DE9A96"
    };

    return (
      <div className="app">
        <div className="app-map">
          <Map
            style={{ width: "100%", height: "100%" }}
            center={[15,100]}
            zoom={7}
          >
            {!this.state.layerHidden && (
              <React.Fragment>
                <HeatmapLayer
                  //fitBoundsOnLoad
                  points={this.state.addressPoints}
                  longitudeExtractor={m => m[1]}
                  latitudeExtractor={m => m[0]}
                  gradient={gradient}
                  intensityExtractor={m => parseFloat(m[2])}
                  radius={Number(this.state.radius)}
                  blur={Number(this.state.blur)}
                  max={Number.parseFloat(this.state.max)}
                />
              </React.Fragment>
            )}
            <TileLayer
              url="http://{s}.tile.osm.org/{z}/{x}/{y}.png"
              attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            />
          </Map>
        </div>
      </div>
    );
  }
}

render(<App />, document.getElementById("root"));
export default App;

